@charset "utf-8";

@mixin add-prefixes( $property, $value, $ms: 'true', $o: 'false' ) {
	-moz-#{$property}: #{$value};
	-webkit-#{$property}: #{$value};
	@if $o == 'true' {
		-o-#{$property}: #{$value};
	}
	@if $ms == 'true' {
		-ms-#{$property}: #{$value};
	}
	#{$property}: #{$value};
}

@mixin border-radius( $radius ) {
	@include add-prefixes( 'border-radius', $radius );
}

@mixin box-shadow( $shadow ) {
	@include add-prefixes( 'box-shadow', $shadow );
}

@mixin force-justify() {
	text-align: justify;
	
	&:after {
		content: "";
		display: inline-block;
		width: 100%;
	}
}

@mixin ie-text-shadow( $color, $strength ) {
	filter: progid:DXImageTransform.Microsoft.Shadow(color=#{$color},direction=0,strength=#{$strength})
	progid:DXImageTransform.Microsoft.Shadow(color=#{$color},direction=90,strength=#{$strength})
	progid:DXImageTransform.Microsoft.Shadow(color=#{$color},direction=180,strength=#{$strength})
	progid:DXImageTransform.Microsoft.Shadow(color=#{$color},direction=270,strength=#{$strength});
}

@mixin opacity( $val ) {
	-ms-filter: alpha(opacity = $val * 100);
	filter: alpha(opacity = $val * 100);
	@include add-prefixes( 'opacity', $val );
}

@mixin sprite() {
	overflow: hidden;
	text-indent: 150%;
	white-space: nowrap;
}

@mixin transition( $property, $duration, $delay ) {
	@include add-prefixes( 'transition', #{$property} $duration $delay, 'true', 'false' );
}


// param $direction: vertical, horizontal, angle
// $bg_above, $bg_below should be passed as quoted strings w/ commas

@mixin gradient( $direction, $color_top, $stop_top, $color_bot, $stop_bot, $bg_above: '', $bg_below: '' ) {
	$dir: 'top';
	$wk_dir: 'linear, left top, left bottom';
	$ms: 0;
	
	@if $bg_above == '' {
		$bg_above: #{""};
	}
	@if $bg_below == '' {
		$bg_below: #{""};
	}
	
	@if $direction == 'angle' {
		$dir: 'top left';
		$wk_dir: 'linear, left top, right bottom';
		$ms: 0;
	} @else if $direction == 'horizontal' {
		$dir: 'left';
		$wk_dir: 'linear, left top, right top';
		$ms: 1;
	}
	
	background-image: $bg_above linear-gradient(#{$dir}, $color_top $stop_top, $color_bot $stop_bot) $bg_below;
	background-image: $bg_above -o-linear-gradient(#{$dir}, $color_top $stop_top, $color_bot $stop_bot) $bg_below;
	background-image: $bg_above -moz-linear-gradient(#{$dir}, $color_top $stop_top, $color_bot $stop_bot) $bg_below;
	background-image: $bg_above -webkit-linear-gradient(#{$dir}, $color_top $stop_top, $color_bot $stop_bot) $bg_below;
	background-image: $bg_above -ms-linear-gradient(#{$dir}, $color_top $stop_top, $color_bot $stop_bot) $bg_below;
	background-image: $bg_above -webkit-gradient( #{$wk_dir}, color-stop($stop_top, $color_top), color-stop($stop_bot, $color_bot) ) $bg_below;
	filter:  progid:DXImageTransform.Microsoft.gradient(GradientType=#{$ms},startColorstr='#{$color_top}', endColorstr='#{$color_bot}');
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient(GradientType=#{$ms},startColorstr='#{$color_top}', endColorstr='#{$color_bot}')";
}


// $fileName = filename, including path, with no extension
@mixin webfont( $cssname, $filename ) {
    font-family: $cssname;
	src: url( $filename + '.eot' );
	src: url( $filename + '.eot?#iefix') format('embedded-opentype'),
         url( $filename + '.woff') format('woff'),
         url( $filename + '.ttf') format('truetype');
}


// from http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: unquote("#{$result}#{to-string($e, $glue, true)}");
    }
    
    @else {
      $result: if($i != length($list) or $is-nested, unquote("#{$result}#{$e}#{$glue}"), unquote("#{$result}#{$e}") );
    }
  }

  @return $result;
}

// Strip out units to do math functions.
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}